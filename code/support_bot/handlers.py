# handlers.py (updated)

import aiogram.types as agtypes
from aiogram import Dispatcher, F
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from zoneinfo import ZoneInfo
import datetime
from .admin_actions import BroadcastForm, admin_broadcast_ask_confirm, admin_broadcast_finish
from .buttons import (
    admin_btn_handler, send_new_msg_with_keyboard, user_btn_handler,
    get_share_phone_keyboard, get_categories_keyboard,
    get_faq_keyboard, get_orders_keyboard, get_remove_keyboard,
    build_feedback_keyboard, build_rating_keyboard, build_start_over_keyboard, TicketCBD
)
from .informing import handle_error, log
from .filters import (
    ACommandFilter, BtnInAdminGroup, BtnInPrivateChat, BotMention, InAdminGroup,
    GroupChatCreatedFilter, NewChatMembersFilter, PrivateChatFilter,
    ReplyToBotInGroupForwardedFilter,
)
from .utils import make_user_info
from .db import BoomUser, Ticket
from .const import SupportFlow


@log
@handle_error
async def cmd_start(msg: agtypes.Message, state: FSMContext, *args, **kwargs) -> None:
    """Start command: if user already registered, skip phone request."""
    bot = msg.bot
    db = bot.db
    sender_id = kwargs.get("user_id") or msg.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = await db.boom_user.find_by_telegram_id(sender_id)

    if user and user.phone:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        greeting = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö Boon Market ü©∑ –ß—Ç–æ–±—ã –º—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–≥–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è"
        )
        await state.set_state(SupportFlow.category)
        await msg.answer(greeting, reply_markup=get_categories_keyboard())
    else:
        # –¢–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º
        await state.set_state(SupportFlow.waiting_phone)
        await msg.answer(
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ —Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã.",
            reply_markup=get_share_phone_keyboard()
        )



async def _create_ticket_thread(msg: agtypes.Message, subject: str, ticket_info: str) -> int:
    """Create a new topic for the ticket with structured info"""
    group_id = msg.bot.cfg['admin_group_id']
    bot = msg.bot

    response = await bot.create_forum_topic(group_id, subject)
    thread_id = response.message_thread_id

    await bot.send_message(group_id, ticket_info, message_thread_id=thread_id, parse_mode='HTML')
    return thread_id


async def _group_hello(msg: agtypes.Message):
    """Send group hello message to a group"""
    group = msg.chat
    text = f'Hello!\nID of this group: <code>{group.id}</code>'
    if not group.is_forum:
        text += '\n\n‚ö†Ô∏è Please enable topics in the group settings. This will also change its ID.'
    await msg.bot.send_message(group.id, text)


@log
@handle_error
async def added_to_group(msg: agtypes.Message, *args, **kwargs):
    """Report group ID when added to a group"""
    for member in msg.new_chat_members:
        if member.id == msg.bot.id:
            await _group_hello(msg)
            break


@log
@handle_error
async def group_chat_created(msg: agtypes.Message, *args, **kwargs):
    """Report group ID when a group with the bot is created"""
    await _group_hello(msg)


@log
@handle_error
async def user_message(msg: agtypes.Message, state: FSMContext, *args, **kwargs) -> None:
    """Handle user input: if description state, create ticket; else forward to existing ticket."""
    bot = msg.bot
    group_id = bot.cfg['admin_group_id']
    sender_id = msg.from_user.id
    now_yakutsk = datetime.datetime.now(ZoneInfo("Asia/Yakutsk"))
    yakutsk_hour = now_yakutsk.hour
    data = await state.get_data()
    state_name = await state.get_state()

    # Find user (but don't create if not found)
    user = await bot.db.boom_user.find_by_telegram_id(sender_id)
    user_id = user.id if user else None
    phone_number = user.phone if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    display_name = user.name if user and user.name != "–ì–æ—Å—Ç—å" else msg.from_user.full_name
    branch = "–†–æ—Å—Å–∏—è" if user and user.phone and user.phone.startswith('7') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # Check if user has an open or reopened ticket first
    ticket = await bot.db.tickets.find_last_open_by_user(sender_id)
    
    # If we're in description state AND no open ticket exists, create new ticket
    if state_name == SupportFlow.description and not ticket:
        category = data.get('category', 'unknown')
        order_number = data.get('order', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        description = msg.text or msg.caption or 'No text'
        
        # Get order details to extract store_id (only if user exists and order specified)
        store_id = None
        store_title = None
        if order_number and order_number != '–Ω–µ —É–∫–∞–∑–∞–Ω' and user_id:
            order_details = await bot.db.boom_user.get_order_by_number(order_number)
            if order_details and order_details.get('store_id'):
                store_id = order_details['store_id']
                store_title = await bot.db.boom_user.get_store_title(store_id)
        
        # Create ticket first without thread_id
        ticket_id = await bot.db.tickets.create(
            telegram_id=sender_id,
            user_id=user_id,
            category=category,
            order_number=order_number if order_number != '–Ω–µ —É–∫–∞–∑–∞–Ω' else None,
            description=description,
            branch=branch,
            store_id=store_id
        )

        display_name_with_id = f"‚Ññ{ticket_id} | {user.name if user and user.name != '–ì–æ—Å—Ç—å' else msg.from_user.full_name}"

        
        # Build subject
        if user_id:
            subject_parts = []
            if store_title:
                subject_parts.append(store_title)
            if order_number and order_number != '–Ω–µ —É–∫–∞–∑–∞–Ω':
                subject_parts.append(order_number)
            subject_parts.append(display_name_with_id)
            subject = ': '.join(subject_parts)
        else:
            subject = f"–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name_with_id} ({category})"
        
        # Build structured ticket info
        store_display = store_title if store_title else "–ù–µ —É–∫–∞–∑–∞–Ω"
        order_display = order_number if order_number != '–Ω–µ —É–∫–∞–∑–∞–Ω' else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        ticket_info = (
            f"<b>–ò–º—è:</b> {display_name}\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
            f"<b>–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> ‚Ññ{ticket_id}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
            f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_display}\n"
            f"<b>–§–∏–ª–∏–∞–ª/–ú–∞–≥–∞–∑–∏–Ω:</b> {store_display}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
            f"<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ‚Äú–û—Ç–≤–µ—Ç–∏—Ç—å‚Ü©Ô∏è</i>"
            f"<i>–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ‚Äú/close‚Äù </i>"
        )
        
        # Create new thread for this ticket
        thread_id = await _create_ticket_thread(msg, subject, ticket_info)
        
        # Update ticket with thread_id and subject
        await bot.db.tickets.update_thread_subject(ticket_id, thread_id, subject)

        # Send to user
        if 8 <= yakutsk_hour <= 23:
            user_response = f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å–ø–∞—Å–∏–±–æ! –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –≤–∏–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è üòä  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ - –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üôå"
        else:
            user_response = f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å–ø–∞—Å–∏–±–æ! –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏: —Å 08:00 –¥–æ 23:00. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ - –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è."
        
        # Keep user in active ticket state - clear state to allow free messaging
        await bot.send_message(msg.chat.id, user_response, reply_markup=get_remove_keyboard())
        await state.clear()  # Clear state so user can freely message

    else:
        try:
            ticket = await bot.db.tickets.find_last_open_by_user(sender_id)
        except Exception as e:
            await bot.log_error(f"DB error while fetching ticket for user {sender_id}: {e}")
            await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    # --- 1. –¢–∏–∫–µ—Ç –Ω–∞–π–¥–µ–Ω ---
        if ticket:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            is_closed = getattr(ticket, "is_closed", False)
            status = getattr(ticket, "status", None)

        # --- 1.1. –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ ---
            if is_closed or status == "closed":
                try:
                    await bot.db.tickets.update_status(ticket.id, "reopened")
                    await bot.log(f"Reopened ticket #{ticket.id} for user {sender_id}")
                except Exception as e:
                    await bot.log_error(f"Failed to reopen ticket #{ticket.id}: {e}")
                    await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return

        # --- 1.2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–º—ã (thread_id) ---
            if not getattr(ticket, "thread_id", None):
                await msg.answer(
                    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –æ–Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º–æ–π —á–∞—Ç–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /start.",
                )
                return

        # --- 1.3. –ü—ã—Ç–∞–µ–º—Å—è —Ñ–æ—Ä–≤–∞—Ä–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ---
            try:
                await msg.forward(group_id, message_thread_id=ticket.thread_id)
            except TelegramBadRequest as e:
                await bot.log_error(f"TelegramBadRequest forwarding to thread {ticket.thread_id}: {e}")
                await msg.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /start."
                )
            except TelegramForbiddenError:
                await bot.log_error(f"Bot was blocked or restricted while forwarding user {sender_id}")
                await msg.answer("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                await bot.log_error(f"Unexpected forwarding error for ticket #{ticket.id}: {e}")
                await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # --- 2. –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ---
        else:
            await msg.answer(
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
            )



@log
@handle_error
async def admin_message(msg: agtypes.Message, *args, **kwargs) -> None:
    """Copy admin reply to a user via ticket thread_id"""
    bot = msg.bot

    if msg.reply_to_message and msg.message_thread_id:
        ticket = await bot.db.tickets.find_by_thread_id(msg.message_thread_id)
        if ticket and ticket.telegram_id:
            target_id = ticket.telegram_id
            await bot.log(f"Target from ticket: {target_id}")
            try:
                await msg.copy_to(target_id)
                await bot.log(f"Reply copied to user {target_id}")
            except TelegramForbiddenError as e:
                thread_id = msg.message_thread_id
                bot_info = await bot.get_me()
                if "bots can't send messages to bots" in e.message:
                    error_msg = f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É {target_id}. –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º."
                else:
                    error_msg = f"–û—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).\n" \
                                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å @{bot_info.username} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
                await bot.send_message(msg.chat.id, error_msg, message_thread_id=thread_id)
                return
            except Exception as e:
                await bot.log_error(e)
        else:
            await bot.log("No ticket found for thread_id ‚Äî skipping copy")


@log
@handle_error
async def cmd_close_ticket(msg: agtypes.Message, *args, **kwargs) -> None:
    """Admin command to close ticket and request rating from user"""
    bot = msg.bot
    thread_id = msg.message_thread_id

    if not thread_id:
        await msg.answer("–ö–æ–º–∞–Ω–¥–∞ /close –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã —Ç–∏–∫–µ—Ç–∞.")
        return

    ticket = await bot.db.tickets.find_by_thread_id(thread_id)
    if not ticket:
        await msg.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã")
        return

    if ticket.is_closed:
        await msg.answer(f"–¢–∏–∫–µ—Ç ‚Ññ{ticket.id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
        return

    await bot.db.tickets.close_ticket(ticket.id)
    await msg.answer(f"–û—Ü–µ–Ω–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    from .buttons import build_closure_confirmation_keyboard
    confirmation_text = "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ä–µ—à–∏—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å?"
    try:
        await bot.send_message(
            ticket.telegram_id,
            confirmation_text,
            reply_markup=build_closure_confirmation_keyboard(ticket.id).as_markup()
        )
    except Exception as e:
        await bot.log_error(e)
        await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ticket.telegram_id}")


@log
@handle_error
async def mention_in_admin_group(msg: agtypes.Message, *args, **kwargs):
    """Report group ID when mentioned in admin group"""
    bot, group = msg.bot, msg.chat
    await send_new_msg_with_keyboard(bot, group.id, 'Choose:', bot.admin_menu)


@log
@handle_error
async def handle_contact(msg: agtypes.Message, state: FSMContext, *args, **kwargs) -> None:
    """Handle phone contact; lookup/update user; transition to category selection."""
    bot = msg.bot
    db = bot.db
    
    if not msg.contact or msg.contact.user_id != msg.from_user.id:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞').")
        await state.clear()
        return

    phone = msg.contact.phone_number
    sender_id = msg.from_user.id
    redacted_phone = f"****{phone[-4:]}"
    await bot.log(f"Received contact: {redacted_phone} (user_id: {sender_id})")

    try:
        user = await db.boom_user.find_by_phone(phone)
        if user:
            await bot.log(f"User found: ID {user.id}, name {user.name}")
            if not user.telegram_id or user.telegram_id != sender_id:
                await db.boom_user.update_telegram_id(user.id, sender_id)
            greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö Boon Market. –ß—Ç–æ–±—ã –º—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–≥–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è."
        else:
            await bot.log(f"User not found: {redacted_phone}")
            greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö Boon Market. –ß—Ç–æ–±—ã –º—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–≥–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è."
        
        await state.set_state(SupportFlow.category)
        await msg.answer(greeting, reply_markup=get_categories_keyboard())
        
    except ValueError as e:
        await bot.log_error(e)
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    except Exception as e:
        await bot.log_error(e)
        await msg.answer("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_remove_keyboard())
        await state.clear()


@log
@handle_error
async def handle_categories(msg: agtypes.Message, state: FSMContext, *args, **kwargs) -> None:
    """Handle category selections; fetch orders if needed, handle unregistered case."""
    bot = msg.bot
    db = bot.db
    text = msg.text
    sender_id = msg.from_user.id

    if text == "–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É":
        user = await db.boom_user.find_by_telegram_id(sender_id)
        cat_text = "–ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º"
        await state.update_data(category=cat_text)
        if not user:
            await state.update_data(order="–Ω–µ —É–∫–∞–∑–∞–Ω")
            await state.set_state(SupportFlow.description)
            await msg.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {cat_text}, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º Boon Market, —É –Ω–∞—Å –Ω–µ—Ç –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤. "
                "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", 
                reply_markup=get_remove_keyboard()
            )
            return
        orders = await db.boom_user.get_recent_orders(user.id)
        await state.set_state(SupportFlow.order_select)
        full_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
        if not orders:
            full_text += "\n–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤"
        await msg.answer(full_text, reply_markup=await get_orders_keyboard(orders, cat_text, state))
        
    elif text == "–ì–¥–µ –º–æ–π –∑–∞–∫–∞–∑":
        user = await db.boom_user.find_by_telegram_id(sender_id)
        cat_text = "–∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
        await state.update_data(category=cat_text)
        if not user:
            await state.update_data(order="–Ω–µ —É–∫–∞–∑–∞–Ω")
            await state.set_state(SupportFlow.description)
            await msg.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {cat_text}, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º Boon Market, —É –Ω–∞—Å –Ω–µ—Ç –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤. "
                "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", 
                reply_markup=get_remove_keyboard()
            )
            return
        orders = await db.boom_user.get_recent_orders(user.id)
        await state.set_state(SupportFlow.order_select)
        full_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
        if not orders:
            full_text += "\n–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤"
        await msg.answer(full_text, reply_markup=await get_orders_keyboard(orders, cat_text, state))
        
    elif text == "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å":
        await state.update_data(category="–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å")
        await state.set_state(SupportFlow.description)
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", reply_markup=get_remove_keyboard())
        
    elif text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_keyboard())
        
    elif text == "–ù–∞–∑–∞–¥ ‚è™":
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:", reply_markup=get_categories_keyboard())


@log
@handle_error
async def handle_order_select(msg: agtypes.Message, state: FSMContext, *args, **kwargs) -> None:
    """Handle order selection or back/other."""
    text = msg.text
    data = await state.get_data()
    category = data.get('category', '')
    orders_map = data.get('orders_map', {})

    if text == "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å":
        await state.update_data(order="–Ω–µ —É–∫–∞–∑–∞–Ω", category=category)
        await state.set_state(SupportFlow.description)
        await msg.answer("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", reply_markup=get_remove_keyboard())
        
    elif text == "–ù–∞–∑–∞–¥ ‚è™":
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:", reply_markup=get_categories_keyboard())
        await state.set_state(SupportFlow.category)
        
    elif text and ("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑" in text or "–ó–∞–∫–∞–∑ ‚Ññ" in text):
        # –î–æ—Å—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π order_number –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        order_num = orders_map.get(text)
        
        if not order_num:
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
            try:
                order_num = text.split("‚Ññ")[1].split()[0]
            except (IndexError, AttributeError):
                await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                               reply_markup=get_categories_keyboard())
                return
        
        await state.update_data(order=order_num)
        await state.set_state(SupportFlow.description)
        await msg.answer("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", reply_markup=get_remove_keyboard())
    else:
        await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_categories_keyboard())


@log
@handle_error
async def handle_faq(msg: agtypes.Message, state: FSMContext, *args, **kwargs) -> None:
    """Handle FAQ selections."""
    text = msg.text
    
    if text == "–ù–∞–∑–∞–¥ ‚è™":
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å - –º—ã –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", reply_markup=get_categories_keyboard())

    elif text == "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞":
        await msg.answer(
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–¥–µ–ª ‚Äú–ú–æ–∏ –∑–∞–∫–∞–∑—ã‚Äù. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–π –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.", 
            reply_markup=get_faq_keyboard()
        )
        
    elif text == "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç":
        await msg.answer(
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", 
            reply_markup=get_faq_keyboard()
        )


@log
@handle_error
async def handle_closure_confirmation(call: agtypes.CallbackQuery, *args, **kwargs):
    """Handle closure confirmation from user"""
    bot = call.message.bot
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 't:' –≤–º–µ—Å—Ç–æ 't::'
        if not call.data.startswith('t:'):
            await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        cbd = TicketCBD.unpack(call.data)
        ticket_id = cbd.ticket_id
        action = cbd.action
        
        ticket = await bot.db.tickets.get_by_id(ticket_id)
        if not ticket:
            await call.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        now_yakutsk = datetime.datetime.now(ZoneInfo("Asia/Yakutsk"))
        yakutsk_hour = now_yakutsk.hour
        
        if action == 'closure_yes':            
            # Close forum topic
            if ticket.thread_id:
                group_id = bot.cfg['admin_group_id']
                try:
                    await bot.close_forum_topic(group_id, ticket.thread_id)
                    await bot.log(f"Forum topic {ticket.thread_id} closed for ticket {ticket_id}")
                except Exception as e:
                    await bot.log_error(f"Failed to close forum topic {ticket.thread_id}: {e}")
            
            # Thank user
            await call.message.edit_text(
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω üòä\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã Boon Market ü©∑\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ:",
                reply_markup=build_rating_keyboard(ticket_id).as_markup()
            )
            
            # # Notify admin
            # if ticket.thread_id:
            #     await bot.send_message(
            #         bot.cfg['admin_group_id'],
            #         f"‚úÖ –¢–∏–∫–µ—Ç ‚Ññ{ticket_id} –∑–∞–∫—Ä—ã—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ ‚≠ê.",
            #         message_thread_id=ticket.thread_id
            #     )
            
            await call.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –∂–¥—ë–º –æ—Ü–µ–Ω–∫—É!")
            
        elif action == 'closure_no':
            # User says issue NOT resolved - reopen ticket
            await bot.db.tickets.update_status(ticket_id, 'reopened')
            
            # Reopen forum topic
            if ticket.thread_id:
                group_id = bot.cfg['admin_group_id']
                try:
                    await bot.reopen_forum_topic(group_id, ticket.thread_id)
                    await bot.log(f"Forum topic {ticket.thread_id} reopened for ticket {ticket_id}")
                except Exception as e:
                    await bot.log_error(f"Failed to reopen forum topic {ticket.thread_id}: {e}")
            
            # Ask user to clarify
            if 8 <= yakutsk_hour <= 23:
                response = (
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã–º - –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è üôå, "
                )
            else:
                response = (
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã–º - –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è üôå. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏: —Å 08:00 –¥–æ 23:00. "
                )
            
            await call.message.edit_text(response)
            
            # Notify admin about reopening
            if ticket.thread_id:
                await bot.send_message(
                    bot.cfg['admin_group_id'],
                    f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ—à–µ–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ",
                    message_thread_id=ticket.thread_id
                )
            
            await call.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–º")
        
    except Exception as e:
        await bot.log_error(e)
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@log
@handle_error
async def handle_start_over(call: agtypes.CallbackQuery, state: FSMContext, *args, **kwargs):
    """Handle '–Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ' button"""
    await call.answer()
    old_text = call.message.text or ""
    if "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å" in old_text:
        old_text = old_text.split("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")[0].strip()

    await call.message.edit_text(f"{old_text}\n\n–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∑–∞–Ω–æ–≤–æ üí¨")


    # —ç–º—É–ª–∏—Ä—É–µ–º /start
    await cmd_start(call.message, state, user_id=call.from_user.id)

@log
@handle_error
async def handle_rating(call: agtypes.CallbackQuery, *args, **kwargs):
    """Handle user rating (1‚Äì5 stars)"""
    bot = call.message.bot
    try:
        _, ticket_id, rating_str = call.data.split(':')
        rating = int(rating_str)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑–µ
        await bot.db.tickets.update_rating(ticket_id, rating)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}‚≠ê!\n"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=build_start_over_keyboard().as_markup()
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        ticket = await bot.db.tickets.get_by_id(ticket_id)
        if ticket and ticket.thread_id:
            stars = "‚≠ê" * rating
            await bot.send_message(
                bot.cfg['admin_group_id'],
                f"‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É: {stars}\n",
                message_thread_id=ticket.thread_id
            )

        await call.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
    except Exception as e:
        await bot.log_error(e)
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.")



def register_handlers(dp: Dispatcher) -> None:
    """Register all the handlers to the provided dispatcher"""
    # Basic commands
    dp.message.register(cmd_start, PrivateChatFilter(), Command('start'))
    dp.callback_query.register(handle_start_over, BtnInPrivateChat(), F.data == "start_over")
    dp.message.register(added_to_group, NewChatMembersFilter())
    dp.message.register(group_chat_created, GroupChatCreatedFilter())
    dp.message.register(mention_in_admin_group, BotMention(), InAdminGroup())
    
    # Admin commands
    dp.message.register(cmd_close_ticket, InAdminGroup(), Command('close'))
    dp.message.register(admin_broadcast_ask_confirm, BroadcastForm.message)
    dp.callback_query.register(admin_broadcast_finish, BroadcastForm.confirm, BtnInAdminGroup())

    # SUPPORT FLOW HANDLERS (specific > general)
    dp.message.register(handle_contact, PrivateChatFilter(), F.contact)
    
    # Category handlers
    dp.message.register(
        handle_categories, 
        SupportFlow.category, 
        F.text.in_([
            "–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É", 
            "–ì–¥–µ –º–æ–π –∑–∞–∫–∞–∑", 
            "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", 
            "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "–ù–∞–∑–∞–¥ ‚è™"
        ])
    )
    
    # Order selection
    dp.message.register(handle_order_select, SupportFlow.order_select)
    
    # FAQ handlers
    dp.message.register(
        handle_faq, 
        SupportFlow.category, 
        F.text.in_([
            "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", 
            "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", 
            "–ù–∞–∑–∞–¥ ‚è™"
        ])
    )

    # RATING HANDLER (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 't:' –≤–º–µ—Å—Ç–æ 't::')
    dp.callback_query.register(handle_closure_confirmation, BtnInPrivateChat(), F.data.startswith('t:'))
    dp.callback_query.register(handle_rating, BtnInPrivateChat(), F.data.startswith('rate:'))

    # GENERAL CALLBACK HANDLERS
    dp.callback_query.register(user_btn_handler, BtnInPrivateChat())
    dp.callback_query.register(admin_btn_handler, BtnInAdminGroup())

    # GENERAL MESSAGE HANDLERS (fallback)
    dp.message.register(user_message, PrivateChatFilter(), ~ACommandFilter())
    dp.message.register(admin_message, ~ACommandFilter(), ReplyToBotInGroupForwardedFilter())